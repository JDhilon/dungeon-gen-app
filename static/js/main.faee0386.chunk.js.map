{"version":3,"sources":["components/Canvas.jsx","components/Header.jsx","components/Form.jsx","components/App.jsx","index.js"],"names":["Canvas","props","draw","options","rest","canvasRef","React","useRef","useEffect","context","current","getContext","useCanvas","ref","Header","Form","useState","gridWidth","setGridWidth","gridHeight","setGridHeight","targetRoomCount","setTargetRoomCount","roomSize","setRoomSize","type","className","min","max","step","name","onChange","event","target","value","onClick","changeHeight","changeWidth","minSize","maxSize","console","log","onGenerate","App","r","gridSize","rooms","setRooms","focusedRoom","setFocusedRoom","w","h","checkCollision","a","b","padding","x","width","y","height","roomCount","generatedRooms","roomsToPlace","i","diff","roomWidth","Math","floor","random","roomHeight","push","roomNum","forEach","placed","tries","valid","xPos","yPos","newRoom","find","room","id","focused","ctx","two","Two","Types","canvas","domElement","makeLine","stroke","j","txt","makeText","size","opacity","rect","makeRectangle","fill","update","style","borderStyle","idToFind","mouseX","nativeEvent","layerX","mouseY","layerY","roomClicked","undefined","map","ReactDOM","render","document","getElementById"],"mappings":"0OAgDeA,MA9Cf,SAAgBC,GACZ,IAAQC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,QAAYC,EAA1B,YAAmCH,EAAnC,GACMI,EAOV,SAAmBH,GAAmB,IAAbC,EAAY,uDAAJ,GACvBE,EAAYC,IAAMC,OAAO,MA4B/B,OAvBAD,IAAME,WAAU,WAEZ,IACMC,EADSJ,EAAUK,QACFC,WAAWR,EAAQM,SAAW,MACrDP,EAAKO,KAiBN,CAACP,EAAMC,IAEHE,EApCWO,CAAUV,EAAMC,GAGlC,OAAO,oCAAQU,IAAKR,GAAeD,KCCxBU,MANf,SAAgBb,GACZ,OAAO,iCACH,sD,OCuFOc,MAzFf,SAAcd,GAEV,MAAgCK,IAAMU,SAAS,IAA/C,mBACA,GADA,UACkCV,IAAMU,SAAS,KAAjD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCZ,IAAMU,SAAS,IAAnD,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8Cd,IAAMU,SAAS,IAA7D,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAAgChB,IAAMU,SAAS,OAA/C,mBAAOO,EAAP,KAAiBC,EAAjB,KA+DA,OAAQ,iCACJ,6CAAgBL,KAChB,uBAAOM,KAAK,QAAQC,UAAU,aAAaC,IAAI,IAAIC,IAAI,KAAKC,KAAK,IAAIC,KAAK,SAASC,SApDvF,SAA0BC,GACtB,MAAwBA,EAAMC,OAAhBC,GAAd,EAAQJ,KAAR,EAAcI,OAGdd,EAAcc,IAgDiGA,MAAOf,IACtH,4CAAeF,KACf,uBAAOQ,KAAK,QAAQC,UAAU,aAAaC,IAAI,IAAIC,IAAI,KAAKC,KAAK,IAAIC,KAAK,QAAQC,SA/CtF,SAAyBC,GACrB,MAAwBA,EAAMC,OAAhBC,GAAd,EAAQJ,KAAR,EAAcI,OAGdhB,EAAagB,IA2CgGA,MAAOjB,IAGpH,gDAAmBI,KACnB,uBAAOI,KAAK,QAAQC,UAAU,aAAaC,IAAI,IAAIC,IAAI,MAAMC,KAAK,IAAIC,KAAK,YAAYC,SApE3F,SAA+BC,GAC3B,MAAwBA,EAAMC,OAAhBC,GAAd,EAAQJ,KAAR,EAAcI,OACdZ,EAAmBY,IAkEqGA,MAAOb,IAC/H,iDACA,yBAAQK,UAAU,6BAA6BQ,MAAOX,EAAUQ,SAjEpE,SAAwBC,GACpB,MAAwBA,EAAMC,OAAhBC,GAAd,EAAQJ,KAAR,EAAcI,OACdV,EAAYU,IA+DZ,UACI,wBAAQA,MAAM,QAAd,+BACA,wBAAQA,MAAM,MAAd,iCACA,wBAAQA,MAAM,QAAd,oCAEJ,wBAAQT,KAAK,SAASC,UAAU,oBAAoBS,QA5CxD,SAAgBH,GACZ/B,EAAMmC,aAAajB,GACnBlB,EAAMoC,YAAYpB,IA0ClB,oBACA,wBAAQQ,KAAK,SAASC,UAAU,kBAAkBS,QAxCtD,WACI,IAAIG,EACAC,EACY,UAAbhB,GACCe,EAAU,EACVC,EAAU,GAEO,QAAbhB,GACJe,EAAU,EACVC,EAAU,GAEO,UAAbhB,GACJe,EAAU,EACVC,EAAU,IAGVC,QAAQC,IAAI,UAAYlB,GAI5BtB,EAAMyC,WAAWrB,EAAiBiB,EAASC,IAoB3C,0BCwHOI,MAzMf,WACI,IAoKuBC,EApKvB,EAAgCtC,IAAMU,SAAS,IAA/C,mBAAO6B,EAAP,KACA,GADA,KACkCvC,IAAMU,SAAS,KAAjD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCZ,IAAMU,SAAS,IAAnD,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA0Bd,IAAMU,SAAS,IAAzC,mBAAO8B,EAAP,KAAcC,EAAd,KACA,EAAsCzC,IAAMU,WAA5C,mBAAOgC,EAAP,KAAoBC,EAApB,KAEIC,EAAI,IACJC,EAAI,IAGR,SAASC,EAAeC,EAAGC,GAAe,IAAZC,EAAW,uDAAH,EAClC,OAAIF,EAAEG,EAAID,EAAUV,EAAWS,EAAEE,EAAIF,EAAEG,OACnCJ,EAAEG,EAAIH,EAAEI,MAAQF,EAAUV,EAAWS,EAAEE,GACvCH,EAAEK,EAAIH,EAAUV,EAAWS,EAAEI,EAAIJ,EAAEK,QACnCN,EAAEK,EAAIL,EAAEM,OAASJ,EAAUV,EAAWS,EAAEI,EA8JhD,OAAO,gCACH,cAAC,EAAD,IACA,sBAAKhC,UAAU,MAAf,UACI,qBAAKA,UAAU,MAAf,SACI,cAAC,EAAD,CAAMgB,WA5JlB,SAAuBkB,EAAWtB,EAASC,GAIvC,IAHA,IAAMsB,EAAiB,GAEjBC,EAAe,GACbC,EAAI,EAAGA,EAAIH,EAAWG,IAAI,CAC9B,IAAIC,EAAOzB,EAAUD,EACjB2B,GAAaC,KAAKC,MAAMD,KAAKE,SAAWJ,GAAQ1B,GAAWO,EAC3DwB,GAAcH,KAAKC,MAAMD,KAAKE,SAAWJ,GAAQ1B,GAAWO,EAEhEiB,EAAaQ,KAAK,CACdb,MAAOQ,EACPN,OAAQU,IAIhB,IACIE,EAAU,EACdT,EAAaU,SAAQ,SAAC5B,GAGlB,IAFA,IAAI6B,GAAS,EACTC,EAAQ,GACLD,GAAUC,EALN,IAKwB,CAI/B,IAAIC,GAAQ,EACRC,EAAOV,KAAKC,MAAMD,KAAKE,SAAWnD,GAAa4B,EAC/CgC,EAAOX,KAAKC,MAAMD,KAAKE,SAAWjD,GAAc0B,EAGjD+B,EAAOhC,EAAEa,MAAQxC,EAAU4B,GAAYgC,EAAOjC,EAAEe,OAASxC,EAAW0B,EAAW,WAC9E,IAAIiC,EAAU,CACVtB,EAAGoB,EACHlB,EAAGmB,EACHpB,MAAOb,EAAEa,MACTE,OAAQf,EAAEe,QAOK,MAJAE,EAAekB,MAAK,SAASC,GAC5C,OAAO5B,EAAe0B,EAASE,EAAM,QAIrCL,GAAQ,GAbkE,GAiB9EA,GAAQ,EAGTA,GACCd,EAAeS,KAAK,CAChBW,GAAIV,EACJf,EAAGoB,EACHlB,EAAGmB,EACHpB,MAAOb,EAAEa,MACTE,OAAQf,EAAEe,OACVuB,SAAS,IAEbT,GAAS,EACTF,KAGAG,QAMZ3B,EAASc,IAyFGxB,YAAanB,EACbkB,aAAchB,MAGtB,sBAAKM,UAAU,MAAf,UACI,cAAC,EAAD,CACIxB,KAtFhB,SAAciF,GACVjC,EAAIL,EAAW5B,EACfkC,EAAIN,EAAW1B,EASf,IAPA,IAAIiE,EAAM,IAAIC,IAAI,CACd5D,KAAM4D,IAAIC,MAAMC,OAChB9B,MAAOP,EACPS,OAAQR,EACRqC,WAAYL,EAAII,SAGZxB,EAAI,EAAGA,EAAIb,EAAGa,GAAGlB,EAAU,CACpBuC,EAAIK,SAAS1B,EAAG,EAAGA,EAAGZ,GAC5BuC,OAAS,WAGlB,IAAI,IAAIC,EAAI,EAAGA,EAAIxC,EAAGwC,GAAG9C,EAAU,CACpBuC,EAAIK,SAAS,EAAGE,EAAGzC,EAAGyC,GAC5BD,OAAS,WAIlB5C,EAAM0B,SAAQ,SAAC5B,GAEX,IAAIgD,EAAMR,EAAIS,SAASjD,EAAEqC,GAAIrC,EAAEY,EAAIX,EAAS,EAAGD,EAAEc,EAAIb,EAAS,GAC9D+C,EAAIE,KAAOjD,EACX+C,EAAIF,OAAS,QACbE,EAAIG,QAAU,IACd,IAAIC,EAAOZ,EAAIa,cAAcrD,EAAEY,EAAKZ,EAAEa,MAAQ,EAAIb,EAAEc,EAAKd,EAAEe,OAAO,EAAIf,EAAEa,MAAOb,EAAEe,QACjFqC,EAAKE,KAAQtD,EAAEsC,QAAU,OAAS,YAClCc,EAAKD,QAAU,MAGnBX,EAAIe,UAsDQhG,QAAS,CACLM,QAAS,MAEb2F,MAAO,CACHC,YAAa,SAEjB5C,MAAOP,EACPS,OAAQR,EACRhB,QA1DhB,SAAqBH,GACjB,IAOIsE,EAPAC,EAASvE,EAAMwE,YAAYC,OAC3BC,EAAS1E,EAAMwE,YAAYG,OAE3BC,EAAc9D,EAAMiC,MAAK,SAACnC,GAC1B,OAAQ2D,EAAS3D,EAAEY,GAAK+C,EAAS3D,EAAEY,EAAIZ,EAAEa,OAASiD,EAAS9D,EAAEc,GAAKgD,EAAS9D,EAAEc,EAAId,EAAEe,UAIpE,OAAhBiD,QAAwCC,IAAhBD,GACvBN,GAAY,EACZrD,KAGAqD,EAAWM,EAAY3B,GAG3BlC,EAASD,EAAMgE,KAAK,SAAAlE,GAQhB,OAPG0D,IAAa1D,EAAEqC,IACdrC,EAAEsC,SAAU,EACZjC,EAAeL,IAEfA,EAAEsC,SAAU,EAGTtC,SAmCH,4BAAII,GA9BOJ,EA8BqBI,EA7BjC,OAASJ,EAAEqC,GAAX,SACCrC,EAAEY,EAAEX,EADL,SAECD,EAAEc,EAAEb,EAFL,cAGMD,EAAEe,OAAOd,EAHf,aAIKD,EAAEa,MAAMZ,EAAW,OAyBwB,OAbnD,c,MCvLZkE,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,W","file":"static/js/main.faee0386.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Canvas(props) {\r\n    const { draw, options, ...rest } = props\r\n    const canvasRef = useCanvas(draw, options)\r\n  \r\n    // Hard code 200 for now\r\n    return <canvas ref={canvasRef} {...rest}/>\r\n}\r\n\r\n// Returns a refernce to a canvas with a specific draw function, and options (such as context)\r\nfunction useCanvas(draw, options={}) {\r\n    const canvasRef = React.useRef(null)\r\n  \r\n    // useEffect() hook essentially runs right after the component (the Canvas) is mounted\r\n    // Every time we change the draw, the function of the useEffect will be called again for the new draw.\r\n    // The dependencies array will be watched by useEffect and run whenever a dependency is changed\r\n    React.useEffect(() => {\r\n    \r\n        const canvas = canvasRef.current\r\n        const context = canvas.getContext(options.context || '2d')\r\n        draw(context);\r\n\r\n        // Removed animation as it wasn't needed and caused memory issues\r\n        // let frameCount = 0\r\n        // let animationFrameId\r\n        // // All the steps that will be repeated in the animation. render() will be called recursively by the requestAnimationFrame method.\r\n        // const render = () => {\r\n        //     frameCount++\r\n        //     draw(context, frameCount)\r\n        //     animationFrameId = window.requestAnimationFrame(render)\r\n        // }\r\n        // render()\r\n        \r\n        // // Clean-up. Called right before the component unmount. That way we can ensure that our animation frame is cancelled after our canvas component unmount.\r\n        // return () => {\r\n        // window.cancelAnimationFrame(animationFrameId)\r\n        // }\r\n    }, [draw, options])\r\n  \r\n    return canvasRef\r\n}\r\n\r\n// TODO: Look at referenced medium article\r\n// Add Resizing function\r\n// Add handling high pixel density screens (like smartphones)\r\n// Look into predraw and postdraw functions (in case we want to do something like clearing the screen, saving it, etc)\r\n\r\nexport default Canvas\r\n\r\n// for reference\r\n// https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258","import React from 'react'\r\n\r\nfunction Header(props) {\r\n    return <header>\r\n        <h1>Dungeon Generator</h1>\r\n    </header>;\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nfunction Form(props){\r\n\r\n    const [gridSize, setGridSize] = React.useState(25);\r\n    const [gridWidth, setGridWidth] = React.useState(20);\r\n    const [gridHeight, setGridHeight] = React.useState(20);\r\n    const [targetRoomCount, setTargetRoomCount] = React.useState(10);\r\n    const [roomSize, setRoomSize] = React.useState('reg');\r\n\r\n    // -- Setting up the room parameters -- //\r\n    function changeTargetRoomCount(event) {\r\n        const { name, value } = event.target;\r\n        setTargetRoomCount(value);\r\n    }\r\n\r\n    function changeRoomSize(event) {\r\n        const { name, value } = event.target;\r\n        setRoomSize(value);\r\n    }\r\n\r\n    function changeGridHeight(event) {\r\n        const { name, value } = event.target;\r\n\r\n        // TODO: Re-enable after getting form submission\r\n        setGridHeight(value);\r\n    }\r\n\r\n    function changeGridWidth(event) {\r\n        const { name, value } = event.target;\r\n\r\n        // TODO: Re-enable after getting form submission\r\n        setGridWidth(value);\r\n    }\r\n\r\n    // function changeGridSize(event) {\r\n    //     const { name, value } = event.target;\r\n\r\n    //     // TODO: Re-enable after getting form submission\r\n    //     // setGridSize(value);\r\n    // }\r\n\r\n    function resize(event) {\r\n        props.changeHeight(gridHeight);\r\n        props.changeWidth(gridWidth);\r\n    }\r\n\r\n    function genDungeon() {\r\n        let minSize;\r\n        let maxSize;\r\n        if(roomSize === 'small') {\r\n            minSize = 1;\r\n            maxSize = 5;\r\n        }\r\n        else if(roomSize === 'reg'){\r\n            minSize = 3;\r\n            maxSize = 7;\r\n        }\r\n        else if(roomSize === 'large'){\r\n            minSize = 5;\r\n            maxSize = 10;\r\n        }\r\n        else {\r\n            console.log('error: ' + roomSize);\r\n        }\r\n\r\n        \r\n        props.onGenerate(targetRoomCount, minSize, maxSize);\r\n    }\r\n\r\n    // TODO: Set reasonable max value for the ranges\r\n    return  <form>\r\n        <label>Height: {gridHeight}</label>\r\n        <input type='range' className=\"form-range\" min='1' max='50' step='1' name='height' onChange={changeGridHeight} value={gridHeight}></input>\r\n        <label>Width: {gridWidth}</label>\r\n        <input type='range' className=\"form-range\" min='1' max='50' step='1' name='width' onChange={changeGridWidth} value={gridWidth}></input>\r\n        \r\n\r\n        <label>Max Rooms: {targetRoomCount}</label>\r\n        <input type='range' className=\"form-range\" min='1' max='100' step='1' name='roomCount' onChange={changeTargetRoomCount} value={targetRoomCount}></input>\r\n        <label>Room Sizes: </label>\r\n        <select className=\"form-select form-select-sm\" value={roomSize} onChange={changeRoomSize}>\r\n            <option value='small'>Small (1x1 - 5x5)</option>\r\n            <option value='reg'>Regular (3x3 - 7x7)</option>\r\n            <option value='large'>Large (5x5 - 10x10)</option>\r\n        </select>\r\n        <button type='button' className='btn btn-secondary' onClick={resize}>Resize</button>\r\n        <button type='button' className='btn btn-primary' onClick={genDungeon}>Generate</button>\r\n    </form>;\r\n}\r\n\r\nexport default Form;","import React from 'react'\r\nimport Canvas from './Canvas'\r\nimport Header from './Header'\r\nimport Two from 'two.js';\r\nimport Form from './Form'\r\n\r\nfunction App() {\r\n    const [gridSize, setGridSize] = React.useState(25);\r\n    const [gridWidth, setGridWidth] = React.useState(20);\r\n    const [gridHeight, setGridHeight] = React.useState(20);\r\n    const [rooms, setRooms] = React.useState([]);\r\n    const [focusedRoom, setFocusedRoom] = React.useState();\r\n\r\n    var w = 600;\r\n    var h = 600;\r\n\r\n    // --- Code the created rooms --- // TODO: Move it into external file\r\n    function checkCollision(a, b, padding=0) {\r\n        if (a.x - padding * gridSize < b.x + b.width && \r\n            a.x + a.width + padding * gridSize > b.x && \r\n            a.y - padding * gridSize < b.y + b.height && \r\n            a.y + a.height + padding * gridSize > b.y) {\r\n                return true;\r\n            } \r\n        return false;\r\n    }\r\n\r\n    function generateRooms(roomCount, minSize, maxSize) {\r\n        const generatedRooms = [];\r\n        // Creates a set of random rooms we will try to place\r\n        const roomsToPlace = [];\r\n        for(var i = 0; i < roomCount; i++){\r\n            let diff = maxSize - minSize;\r\n            let roomWidth = (Math.floor(Math.random() * diff) + minSize) * gridSize;\r\n            let roomHeight = (Math.floor(Math.random() * diff) + minSize) * gridSize;\r\n\r\n            roomsToPlace.push({\r\n                width: roomWidth,\r\n                height: roomHeight\r\n            });\r\n        }\r\n\r\n        let maxTries = 10;\r\n        let roomNum = 0;\r\n        roomsToPlace.forEach((r) => {\r\n            let placed = false;\r\n            let tries = 0;\r\n            while(!placed && tries < maxTries) {\r\n\r\n\r\n                // Try to place a room at a random spot\r\n                let valid = true;\r\n                let xPos = Math.floor(Math.random() * gridWidth) * gridSize;\r\n                let yPos = Math.floor(Math.random() * gridHeight) * gridSize;\r\n\r\n                // See if room is in bounds\r\n                if(xPos + r.width < gridWidth*gridSize && yPos + r.height < gridHeight*gridSize) {\r\n                    let newRoom = {\r\n                        x: xPos,\r\n                        y: yPos,\r\n                        width: r.width,\r\n                        height: r.height\r\n                    };\r\n\r\n                    let collidedRoom = generatedRooms.find(function(room) {\r\n                        return checkCollision(newRoom, room, 1);\r\n                    });\r\n\r\n                    if(collidedRoom != null) {\r\n                        valid = false;\r\n                    }\r\n                }\r\n                else {\r\n                    valid = false;\r\n                }\r\n\r\n                if(valid){\r\n                    generatedRooms.push({\r\n                        id: roomNum,\r\n                        x: xPos,\r\n                        y: yPos,\r\n                        width: r.width,\r\n                        height: r.height,\r\n                        focused: false\r\n                    });\r\n                    placed = true;\r\n                    roomNum ++;\r\n                }\r\n                else {\r\n                    tries++;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Made this with useState for now. Stops memory leak with constantly refreshing canvas\r\n        setRooms(generatedRooms);\r\n    }\r\n\r\n    // --- End of creating rooms --- //\r\n    // rooms = generateRooms(targetRoomCount, roomMinSize, roomMaxSize);\r\n\r\n    // Define a draw function\r\n    // https://two.js.org/#basic-usage\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    function draw(ctx) {\r\n        w = gridSize * gridWidth;\r\n        h = gridSize * gridHeight;\r\n\r\n        var two = new Two({\r\n            type: Two.Types.canvas,\r\n            width: w,\r\n            height: h,\r\n            domElement: ctx.canvas\r\n        });\r\n\r\n        for(var i = 0; i < w; i+=gridSize) {\r\n            var line = two.makeLine(i, 0, i, h);\r\n            line.stroke = 'DarkGray';\r\n        }\r\n\r\n        for(var j = 0; j < h; j+=gridSize) {\r\n            var line = two.makeLine(0, j, w, j);\r\n            line.stroke = 'DarkGray';\r\n        }\r\n\r\n         // Draw all rooms\r\n        rooms.forEach((r) => {\r\n            // Takes center of rect as it's x/y\r\n            var txt = two.makeText(r.id, r.x + gridSize/2, r.y + gridSize/2);\r\n            txt.size = gridSize;\r\n            txt.stroke = 'black';\r\n            txt.opacity = 0.75;\r\n            var rect = two.makeRectangle(r.x + (r.width / 2), r.y + (r.height/2), r.width, r.height);\r\n            rect.fill = (r.focused ? 'blue' : 'orangered');\r\n            rect.opacity = 0.5;\r\n        });\r\n\r\n        two.update();\r\n    }\r\n\r\n    // Checked to see if user clicked on a specific room, and will highlight that room\r\n    function handleClick(event){\r\n        let mouseX = event.nativeEvent.layerX;\r\n        let mouseY = event.nativeEvent.layerY;\r\n        \r\n        let roomClicked = rooms.find((r) => {\r\n            return (mouseX > r.x && mouseX < r.x + r.width && mouseY > r.y && mouseY < r.y + r.height);\r\n        });\r\n\r\n        let idToFind;\r\n        if(roomClicked === null || roomClicked === undefined) {\r\n            idToFind = -1;\r\n            setFocusedRoom();\r\n        }\r\n        else {\r\n            idToFind = roomClicked.id;\r\n        }\r\n\r\n        setRooms(rooms.map( r => {\r\n            if(idToFind === r.id){\r\n                r.focused = true;\r\n                setFocusedRoom(r);\r\n            } else {\r\n                r.focused = false;\r\n            }\r\n\r\n            return r;\r\n        }));\r\n    }\r\n\r\n    // temporary function for printing room parameters\r\n    function getRoomParams(r) {\r\n        return 'id: ' + r.id + '\\n ' +\r\n        'x: ' + r.x/gridSize + '\\n ' +\r\n        'y: ' + r.y/gridSize + '\\n ' +\r\n        'height: ' + r.height/gridSize + '\\n ' +\r\n        'width: ' + r.width/gridSize + '\\n ';\r\n    }\r\n\r\n    return <div>\r\n        <Header />\r\n        <div className='row'>\r\n            <div className='col'>\r\n                <Form onGenerate={generateRooms}\r\n                    changeWidth={setGridWidth}\r\n                    changeHeight={setGridHeight}\r\n                />\r\n            </div>\r\n            <div className='col'>\r\n                <Canvas \r\n                    draw={draw} \r\n                    options={{\r\n                        context: '2d'\r\n                        }}\r\n                    style={{\r\n                        borderStyle: 'solid'\r\n                    }}\r\n                    width={w}\r\n                    height={h}\r\n                    onClick={handleClick}\r\n                />\r\n                <p>{focusedRoom ? getRoomParams(focusedRoom) : null}</p> {/*TODO: Make this an actual component that renders underneath canvas*/}\r\n            </div>\r\n        </div>\r\n  </div>;\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/styles.css';\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n);\n\n// https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\n// For changes, commit and push to remote master, then run \"npm run deploy\" again\n"],"sourceRoot":""}