{"version":3,"sources":["components/Canvas.jsx","components/Header.jsx","components/Form.jsx","utils/adj-matrix.graph.js","utils/map.js","components/App.jsx","index.js"],"names":["Canvas","props","draw","options","rest","canvasRef","React","useRef","useEffect","context","current","getContext","useCanvas","ref","Header","Form","useState","gridWidth","setGridWidth","gridHeight","setGridHeight","targetRoomCount","setTargetRoomCount","roomSize","setRoomSize","type","className","min","max","step","name","onChange","event","target","value","onClick","changeHeight","changeWidth","minSize","maxSize","console","log","onGenerate","Graph","size","this","matrix","i","push","j","vertex1","vertex2","weight","row","keys","mstSet","Number","MAX_VALUE","minIndex","parents","u","minKey","v","Map","rooms","paths","focusedRoom","a","b","padding","x","width","y","height","Math","sqrt","generatedRooms","roomsToPlace","diff","roomWidth","floor","random","roomHeight","roomNum","forEach","r","placed","tries","valid","xPos","yPos","newRoom","find","room","checkCollision","id","focused","r1","idx1","ar","r2","idx2","addEdge","distance","getMidPoint","unsetFocusedRoom","App","gridSize","map","setMap","selectedRoom","setSelectedRoom","w","h","numRooms","mapWidth","mapHeight","m","generateRooms","generatePaths","primMST","ctx","two","Two","Types","canvas","domElement","makeLine","stroke","txt","makeText","opacity","rect","makeRectangle","fill","dst","src","room1","room2","line","lineWidth","update","style","borderStyle","mouseX","nativeEvent","layerX","mouseY","layerY","roomClicked","findIndex","setFocusedRoom","getRoomParams","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65597a45.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Canvas(props) {\r\n    const { draw, options, ...rest } = props\r\n    const canvasRef = useCanvas(draw, options)\r\n  \r\n    // Hard code 200 for now\r\n    return <canvas ref={canvasRef} {...rest}/>\r\n}\r\n\r\n// Returns a refernce to a canvas with a specific draw function, and options (such as context)\r\nfunction useCanvas(draw, options={}) {\r\n    const canvasRef = React.useRef(null)\r\n  \r\n    // useEffect() hook essentially runs right after the component (the Canvas) is mounted\r\n    // Every time we change the draw, the function of the useEffect will be called again for the new draw.\r\n    // The dependencies array will be watched by useEffect and run whenever a dependency is changed\r\n    React.useEffect(() => {\r\n    \r\n        const canvas = canvasRef.current\r\n        const context = canvas.getContext(options.context || '2d')\r\n        draw(context);\r\n\r\n        // Removed animation as it wasn't needed and caused memory issues\r\n        // let frameCount = 0\r\n        // let animationFrameId\r\n        // // All the steps that will be repeated in the animation. render() will be called recursively by the requestAnimationFrame method.\r\n        // const render = () => {\r\n        //     frameCount++\r\n        //     draw(context, frameCount)\r\n        //     animationFrameId = window.requestAnimationFrame(render)\r\n        // }\r\n        // render()\r\n        \r\n        // // Clean-up. Called right before the component unmount. That way we can ensure that our animation frame is cancelled after our canvas component unmount.\r\n        // return () => {\r\n        // window.cancelAnimationFrame(animationFrameId)\r\n        // }\r\n    }, [draw, options])\r\n  \r\n    return canvasRef\r\n}\r\n\r\n// TODO: Look at referenced medium article\r\n// Add Resizing function\r\n// Add handling high pixel density screens (like smartphones)\r\n// Look into predraw and postdraw functions (in case we want to do something like clearing the screen, saving it, etc)\r\n\r\nexport default Canvas\r\n\r\n// for reference\r\n// https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258","import React from 'react'\r\n\r\nfunction Header(props) {\r\n    return <header>\r\n        <h1>Dungeon Generator</h1>\r\n    </header>;\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nfunction Form(props){\r\n\r\n    const [gridSize, setGridSize] = React.useState(25);\r\n    const [gridWidth, setGridWidth] = React.useState(20);\r\n    const [gridHeight, setGridHeight] = React.useState(20);\r\n    const [targetRoomCount, setTargetRoomCount] = React.useState(10);\r\n    const [roomSize, setRoomSize] = React.useState('reg');\r\n\r\n    // -- Setting up the room parameters -- //\r\n    function changeTargetRoomCount(event) {\r\n        const { name, value } = event.target;\r\n        setTargetRoomCount(value);\r\n    }\r\n\r\n    function changeRoomSize(event) {\r\n        const { name, value } = event.target;\r\n        setRoomSize(value);\r\n    }\r\n\r\n    function changeGridHeight(event) {\r\n        const { name, value } = event.target;\r\n\r\n        // TODO: Re-enable after getting form submission\r\n        setGridHeight(value);\r\n    }\r\n\r\n    function changeGridWidth(event) {\r\n        const { name, value } = event.target;\r\n\r\n        // TODO: Re-enable after getting form submission\r\n        setGridWidth(value);\r\n    }\r\n\r\n    // function changeGridSize(event) {\r\n    //     const { name, value } = event.target;\r\n\r\n    //     // TODO: Re-enable after getting form submission\r\n    //     // setGridSize(value);\r\n    // }\r\n\r\n    function resize(event) {\r\n        props.changeHeight(gridHeight);\r\n        props.changeWidth(gridWidth);\r\n    }\r\n\r\n    function genDungeon() {\r\n        let minSize;\r\n        let maxSize;\r\n        if(roomSize === 'small') {\r\n            minSize = 1;\r\n            maxSize = 5;\r\n        }\r\n        else if(roomSize === 'reg'){\r\n            minSize = 3;\r\n            maxSize = 7;\r\n        }\r\n        else if(roomSize === 'large'){\r\n            minSize = 5;\r\n            maxSize = 10;\r\n        }\r\n        else {\r\n            console.log('error: ' + roomSize);\r\n        }\r\n\r\n        props.onGenerate(targetRoomCount, minSize, maxSize, gridWidth, gridHeight);\r\n    }\r\n\r\n    // TODO: Set reasonable max value for the ranges\r\n    return  <form>\r\n        <label>Height: {gridHeight}</label>\r\n        <input type='range' className=\"form-range\" min='1' max='50' step='1' name='height' onChange={changeGridHeight} value={gridHeight}></input>\r\n        <label>Width: {gridWidth}</label>\r\n        <input type='range' className=\"form-range\" min='1' max='50' step='1' name='width' onChange={changeGridWidth} value={gridWidth}></input>\r\n        \r\n\r\n        <label>Max Rooms: {targetRoomCount}</label>\r\n        <input type='range' className=\"form-range\" min='1' max='100' step='1' name='roomCount' onChange={changeTargetRoomCount} value={targetRoomCount}></input>\r\n        <label>Room Sizes: </label>\r\n        <select className=\"form-select form-select-sm\" value={roomSize} onChange={changeRoomSize}>\r\n            <option value='small'>Small (1x1 - 5x5)</option>\r\n            <option value='reg'>Regular (3x3 - 7x7)</option>\r\n            <option value='large'>Large (5x5 - 10x10)</option>\r\n        </select>\r\n        <button type='button' className='btn btn-secondary' onClick={resize}>Resize</button>\r\n        <button type='button' className='btn btn-primary' onClick={genDungeon}>Generate</button>\r\n    </form>;\r\n}\r\n\r\nexport default Form;","class Graph {\r\n\r\n    // Define a graph with a adj matrix with weights = 0\r\n    constructor(size = 1) {\r\n        this.size = size;\r\n        this.matrix = [];\r\n        for (let i = 0; i < size; i++) {\r\n            this.matrix.push([]);\r\n            for (let j = 0; j < size; j++) {\r\n                this.matrix[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add an edge, checking first to see if vertices are valid\r\n    addEdge(vertex1, vertex2, weight = 1) {\r\n        if (vertex1 > this.size - 1 || vertex2 > this.size - 1) {\r\n            console.log('invalid vertex');\r\n        } else if (vertex1 === vertex2) {\r\n            this.matrix[vertex1][vertex2] = 0;\r\n            this.matrix[vertex2][vertex1] = 0;\r\n        } else {\r\n            this.matrix[vertex1][vertex2] = weight;\r\n            this.matrix[vertex2][vertex1] = weight;\r\n        }\r\n    }\r\n\r\n    // Remove an edge, checking first to see if vertices are valid\r\n    removeEdge(vertex1, vertex2) {\r\n        if (vertex1 > this.size - 1 || vertex2 > this.size - 1) {\r\n            console.log('invalid vertex');\r\n        } else {\r\n            this.matrix[vertex1][vertex2] = 0;\r\n            this.matrix[vertex2][vertex1] = 0;\r\n        } \r\n    }\r\n\r\n    // Add a vertex, update size and adj matrix\r\n    addVertex() {\r\n        this.size++;\r\n        this.matrix.push([]);\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.matrix[i][this.size - 1] = 0;\r\n            this.matrix[this.size - 1][i] = 0;\r\n        }\r\n    }\r\n\r\n    // Print values of the matrix\r\n    printMatrix() {\r\n        for (let i = 0; i < this.size; i++) {\r\n            let row = '';\r\n            for (let j = 0; j < this.size; j++) {\r\n                row += ` ${this.matrix[i][j]}`;\r\n            }\r\n            console.log(row);\r\n        }\r\n    }\r\n\r\n    // Utility function to find the vertex with minium cost from vertices not in MST\r\n    minKey(keys, mstSet) {\r\n        let min = Number.MAX_VALUE;\r\n        let minIndex = -1;\r\n\r\n        for (let i = 0; i < this.size; i++) {\r\n            if (mstSet[i] === false && keys[i] < min) {\r\n                min = keys[i];\r\n                minIndex = i;\r\n            }\r\n        }\r\n\r\n        return minIndex;\r\n    }\r\n\r\n    // Function to find MST using Prim's Algorithm\r\n    primMST() {\r\n        if(this.size <= 1) {\r\n            return [];\r\n        }\r\n\r\n        let parents = [];\r\n        let keys = [];\r\n        let mstSet = [];\r\n\r\n        // Initialize all arrays\r\n        for(let i = 0; i < this.size; i++){\r\n            parents.push(0);\r\n            keys.push(Number.MAX_VALUE);\r\n            mstSet.push(false);\r\n        }\r\n\r\n        // Set root of MST\r\n        keys[0] = 0;\r\n        parents[0] = -1;\r\n\r\n        for(let i = 0; i < this.size - 1; i++) {\r\n            let u = this.minKey(keys, mstSet);\r\n            mstSet[u] = true;\r\n\r\n            for(let v = 0; v < this.size; v++) {\r\n                if (this.matrix[u][v] !== 0 && mstSet[v] === false && this.matrix[u][v] < keys[v]) {\r\n                    parents[v] = u;\r\n                    keys[v] = this.matrix[u][v];\r\n                }   \r\n            }\r\n        }\r\n\r\n        return parents;\r\n    }\r\n\r\n}\r\n\r\nexport default Graph;","import Graph from \"./adj-matrix.graph\";\r\n\r\nclass Map {\r\n    constructor(size = 0) {\r\n        this.size = size;\r\n        this.rooms = [];\r\n        this.paths = new Graph(size);\r\n        this.focusedRoom = -1;\r\n    }\r\n\r\n    // AABB collision detection with optional padding\r\n    checkCollision(a, b, padding=0) {\r\n        if (a.x - padding < b.x + b.width && \r\n            a.x + a.width + padding  > b.x && \r\n            a.y - padding < b.y + b.height && \r\n            a.y + a.height + padding > b.y) {\r\n                return true;\r\n            } \r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    static getMidPoint(room) {\r\n        return ([room.x+room.width/2, room.y+room.height/2]);\r\n    }\r\n\r\n    distance(a, b) {\r\n        return Math.sqrt(((a[0] - b[0]) * (a[0] - b[0])) + ((a[1] - b[1]) * (a[1] - b[1])));\r\n    }\r\n\r\n    generateRooms(minSize, maxSize, gridWidth, gridHeight) {\r\n        const generatedRooms = [];\r\n        // Creates a set of random rooms we will try to place\r\n        const roomsToPlace = [];\r\n        for(var i = 0; i < this.size; i++){\r\n            let diff = maxSize - minSize;\r\n            let roomWidth = (Math.floor(Math.random() * diff) + minSize);\r\n            let roomHeight = (Math.floor(Math.random() * diff) + minSize);\r\n\r\n            roomsToPlace.push({\r\n                width: roomWidth,\r\n                height: roomHeight\r\n            });\r\n        }\r\n\r\n        let maxTries = 10;\r\n        let roomNum = 0;\r\n        roomsToPlace.forEach((r) => {\r\n            let placed = false;\r\n            let tries = 0;\r\n            while(!placed && tries < maxTries) {\r\n\r\n\r\n                // Try to place a room at a random spot\r\n                let valid = true;\r\n                let xPos = Math.floor(Math.random() * gridWidth);\r\n                let yPos = Math.floor(Math.random() * gridHeight);\r\n\r\n                // See if room is in bounds\r\n                if(xPos + r.width < gridWidth && yPos + r.height < gridHeight) {\r\n                    let newRoom = {\r\n                        x: xPos,\r\n                        y: yPos,\r\n                        width: r.width,\r\n                        height: r.height\r\n                    };\r\n\r\n                    let collidedRoom = generatedRooms.find((room) => {\r\n                        return this.checkCollision(newRoom, room, 1);\r\n                    });\r\n\r\n                    if(collidedRoom != null) {\r\n                        valid = false;\r\n                    }\r\n                }\r\n                else {\r\n                    valid = false;\r\n                }\r\n\r\n                if(valid){\r\n                    generatedRooms.push({\r\n                        id: roomNum,\r\n                        x: xPos,\r\n                        y: yPos,\r\n                        width: r.width,\r\n                        height: r.height,\r\n                        focused: false\r\n                    });\r\n                    placed = true;\r\n                    roomNum ++;\r\n                }\r\n                else {\r\n                    tries++;\r\n                }\r\n            }\r\n        });\r\n        this.rooms = generatedRooms;\r\n        this.size = roomNum;\r\n    }\r\n\r\n\r\n    generatePaths() {\r\n        this.paths = new Graph(this.size);\r\n        this.rooms.forEach((r1, idx1, ar) => {\r\n            ar.forEach((r2, idx2) => {\r\n                this.paths.addEdge(idx1, idx2, Math.floor( this.distance(Map.getMidPoint(r1), Map.getMidPoint(r2)) * 100 ) );\r\n            });\r\n        });\r\n    }\r\n\r\n    unsetFocusedRoom() {\r\n        if(this.focusedRoom !== -1) {\r\n            this.rooms[this.focusedRoom].focused = false;\r\n            this.focusedRoom = -1;\r\n        }\r\n    }\r\n\r\n    setFocusedRoom(id) {\r\n        this.unsetFocusedRoom();\r\n        this.focusedRoom = id;\r\n        this.rooms[id].focused = true;\r\n    }\r\n}\r\n\r\nexport default Map;","import React from 'react'\r\nimport Canvas from './Canvas'\r\nimport Header from './Header'\r\nimport Two from 'two.js'\r\nimport Form from './Form'\r\nimport Graph from '../utils/adj-matrix.graph'\r\nimport Map from '../utils/map'\r\n\r\nfunction App() {\r\n    const [gridSize, setGridSize] = React.useState(25);\r\n    const [gridWidth, setGridWidth] = React.useState(20);\r\n    const [gridHeight, setGridHeight] = React.useState(20);\r\n    const [map, setMap] = React.useState(new Map());\r\n    const [selectedRoom, setSelectedRoom] = React.useState(-1);\r\n\r\n    var w = 600;\r\n    var h = 600;\r\n\r\n    function updateMap(numRooms, minSize, maxSize, mapWidth, mapHeight) {\r\n        let m = new Map(numRooms);\r\n        m.generateRooms(minSize, maxSize, mapWidth, mapHeight);\r\n        m.generatePaths();\r\n        m.paths.primMST();\r\n        setMap(m);\r\n        setSelectedRoom(-1);\r\n    }\r\n\r\n    // Define a draw function\r\n    // https://two.js.org/#basic-usage\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    function draw(ctx) {\r\n        w = gridSize * gridWidth;\r\n        h = gridSize * gridHeight;\r\n\r\n        var two = new Two({\r\n            type: Two.Types.canvas,\r\n            width: w,\r\n            height: h,\r\n            domElement: ctx.canvas\r\n        });\r\n\r\n        for(let i = 0; i < w; i+=gridSize) {\r\n            let line = two.makeLine(i, 0, i, h);\r\n            line.stroke = 'DarkGray';\r\n        }\r\n\r\n        for(let j = 0; j < h; j+=gridSize) {\r\n            let line = two.makeLine(0, j, w, j);\r\n            line.stroke = 'DarkGray';\r\n        }\r\n\r\n         // Draw all rooms\r\n        map.rooms.forEach((r) => {\r\n            // Takes center of rect as it's x/y\r\n            var txt = two.makeText(r.id, r.x * gridSize + gridSize/2, r.y * gridSize + gridSize/2);\r\n            txt.size = gridSize;\r\n            txt.stroke = 'black';\r\n            txt.opacity = 0.75;\r\n            var rect = two.makeRectangle(r.x * gridSize + (r.width * gridSize / 2), r.y * gridSize + (r.height * gridSize/2), r.width * gridSize, r.height * gridSize);\r\n            rect.fill = (r.focused ? 'blue' : 'orangered');\r\n            rect.opacity = 0.5;\r\n        });\r\n\r\n        // Draw paths generated from minimum spanning tree\r\n        let mst = map.paths.primMST();\r\n        mst.forEach((dst, src) => {\r\n            if(dst !== -1){\r\n                let room1 = Map.getMidPoint(map.rooms[src]);\r\n                let room2 = Map.getMidPoint(map.rooms[dst]);\r\n                let line = two.makeLine(room1[0] * gridSize, room1[1] * gridSize, room2[0] * gridSize, room2[1] * gridSize);\r\n                line.stroke = 'Black';\r\n                line.lineWidth = 10;  \r\n            }\r\n        });\r\n\r\n        // Show all connections (For debug purposes)\r\n        // map.paths.matrix.forEach((row, idx1) => {\r\n        //     row.forEach((cost, idx2) => {\r\n        //         if(cost !== 0){\r\n        //             let room1 = Map.getMidPoint(map.rooms[idx1]);\r\n        //             let room2 = Map.getMidPoint(map.rooms[idx2]);\r\n        //             let line = two.makeLine(room1[0] * gridSize, room1[1] * gridSize, room2[0] * gridSize, room2[1] * gridSize);\r\n        //             line.stroke = 'Black';\r\n        //             line.lineWidth = 1;\r\n        //             line.opacity = 0.25;\r\n        //         }\r\n        //     });\r\n        // });\r\n\r\n        two.update();\r\n    }\r\n\r\n    // Checked to see if user clicked on a specific room, and will highlight that room\r\n    function handleClick(event){\r\n        let mouseX = event.nativeEvent.layerX;\r\n        let mouseY = event.nativeEvent.layerY;\r\n        \r\n        let roomClicked = map.rooms.findIndex((r) => {\r\n            return (mouseX > r.x * gridSize && mouseX < r.x * gridSize + r.width * gridSize && mouseY > r.y * gridSize && mouseY < r.y * gridSize + r.height * gridSize);\r\n        });\r\n\r\n        if(roomClicked === -1) {\r\n            map.unsetFocusedRoom();\r\n            setSelectedRoom(-1);\r\n        }\r\n        else {\r\n            map.setFocusedRoom(roomClicked);\r\n            setSelectedRoom(roomClicked);\r\n        }\r\n    }\r\n\r\n    // temporary function for printing room parameters\r\n    function getRoomParams() {\r\n        let r = map.rooms[selectedRoom];\r\n        return 'id: ' + r.id + '\\n ' +\r\n        'x: ' + r.x + '\\n ' +\r\n        'y: ' + r.y + '\\n ' +\r\n        'height: ' + r.height + '\\n ' +\r\n        'width: ' + r.width + '\\n ';\r\n    }\r\n\r\n    return <div>\r\n        <Header />\r\n        <div className='row'>\r\n            <div className='col'>\r\n                <Form onGenerate={updateMap}\r\n                    changeWidth={setGridWidth}\r\n                    changeHeight={setGridHeight}\r\n                />\r\n            </div>\r\n            <div className='col'>\r\n                <Canvas \r\n                    draw={draw} \r\n                    options={{\r\n                        context: '2d'\r\n                        }}\r\n                    style={{\r\n                        borderStyle: 'solid'\r\n                    }}\r\n                    width={w}\r\n                    height={h}\r\n                    onClick={handleClick}\r\n                />\r\n            <p>{selectedRoom !== -1 ? getRoomParams() : null}</p>{/*TODO: Make this an actual component that renders underneath canvas*/}\r\n            </div>\r\n        </div>\r\n  </div>;\r\n}\r\n\r\nexport default App\r\n\r\n// <p>{focusedRoom ? getRoomParams(focusedRoom) : null}</p>{/*TODO: Make this an actual component that renders underneath canvas*/}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/styles.css';\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n);\n\n// https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\n// For changes, commit and push to remote master, then run \"npm run deploy\" again\n"],"sourceRoot":""}