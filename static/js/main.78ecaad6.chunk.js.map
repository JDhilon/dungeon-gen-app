{"version":3,"sources":["components/Canvas.jsx","components/App.jsx","index.js"],"names":["Canvas","props","draw","options","rest","canvasRef","React","useRef","useEffect","animationFrameId","context","current","getContext","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","useCanvas","ref","App","useState","grid","setGrid","w","h","changeGrid","event","target","name","value","prev","Math","max","min","ctx","two","Two","type","Types","canvas","width","height","domElement","i","makeLine","update","style","borderStyle","onClick","ReactDOM","document","getElementById"],"mappings":"qNA8CeA,MA5Cf,SAAgBC,GACZ,IAAQC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,QAAYC,EAA1B,YAAmCH,EAAnC,GACMI,EAOV,SAAmBH,GAAmB,IAAbC,EAAY,uDAAJ,GACvBE,EAAYC,IAAMC,OAAO,MA0B/B,OArBAD,IAAME,WAAU,WAEZ,IAGIC,EAFEC,EADSL,EAAUM,QACFC,WAAWT,EAAQO,SAAW,MACjDG,EAAa,EAYjB,OARe,SAATC,IACFD,IACAX,EAAKQ,EAASG,GACdJ,EAAmBM,OAAOC,sBAAsBF,GAEpDA,GAGO,WACPC,OAAOE,qBAAqBR,MAE7B,CAACP,EAAMC,IAEHE,EAlCWa,CAAUhB,EAAMC,GAGlC,OAAO,oCAAQgB,IAAKd,GAAeD,K,OCyDxBgB,MA5Df,WAEI,IACA,EAAwBd,IAAMe,SAAS,IAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAI,IACJC,EAAI,IAEV,SAASC,EAAWC,GAChB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAR,EAAcC,MAEdP,GAAQ,SAAAQ,GACJ,MAAY,OAATF,EACQG,KAAKC,IAAIF,EAAO,EAVf,IAYM,SAATF,EACEG,KAAKE,IAAIH,EAAO,EAAGC,KAAKE,IAAIV,EAAGC,SADrC,KA4Bf,OAAO,gCACL,8CACA,cAAC,EAAD,CACIvB,KAtBS,SAACiC,EAAKtB,GAQf,IAPA,IAAIuB,EAAM,IAAIC,IAAI,CACdC,KAAMD,IAAIE,MAAMC,OAChBC,MAAOjB,EACPkB,OAAQjB,EACRkB,WAAYR,EAAIK,SAGZI,EAAI,EAAGA,EAAIpB,EAAGoB,GAAGtB,EACVc,EAAIS,SAASD,EAAG,EAAGA,EAAGnB,GAGrC,IAAQmB,EAAI,EAAGA,EAAInB,EAAGmB,GAAGtB,EACVc,EAAIS,SAAS,EAAGD,EAAGpB,EAAGoB,GAGrCR,EAAIU,UAOJ3C,QAAS,CACLO,QAAS,MAEbqC,MAAO,CACHC,YAAa,SAEjBP,MAAOjB,EACPkB,OAAQjB,IAEZ,wBAAQa,KAAK,SAAST,KAAK,OAAOoB,QAASvB,EAA3C,eACA,wBAAQY,KAAK,SAAST,KAAK,KAAKoB,QAASvB,EAAzC,mBCxDJwB,IAASpC,OAAO,cAAC,EAAD,IACdqC,SAASC,eAAe,W","file":"static/js/main.78ecaad6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Canvas(props) {\r\n    const { draw, options, ...rest } = props\r\n    const canvasRef = useCanvas(draw, options)\r\n  \r\n    // Hard code 200 for now\r\n    return <canvas ref={canvasRef} {...rest}/>\r\n}\r\n\r\n// Returns a refernce to a canvas with a specific draw function, and options (such as context)\r\nfunction useCanvas(draw, options={}) {\r\n    const canvasRef = React.useRef(null)\r\n  \r\n    // useEffect() hook essentially runs right after the component (the Canvas) is mounted\r\n    // Every time we change the draw, the function of the useEffect will be called again for the new draw.\r\n    // The dependencies array will be watched by useEffect and run whenever a dependency is changed\r\n    React.useEffect(() => {\r\n    \r\n        const canvas = canvasRef.current\r\n        const context = canvas.getContext(options.context || '2d')\r\n        let frameCount = 0\r\n        let animationFrameId\r\n        \r\n        // All the steps that will be repeated in the animation. render() will be called recursively by the requestAnimationFrame method.\r\n        const render = () => {\r\n            frameCount++\r\n            draw(context, frameCount)\r\n            animationFrameId = window.requestAnimationFrame(render)\r\n        }\r\n        render()\r\n        \r\n        // Clean-up. Called right before the component unmount. That way we can ensure that our animation frame is cancelled after our canvas component unmount.\r\n        return () => {\r\n        window.cancelAnimationFrame(animationFrameId)\r\n        }\r\n    }, [draw, options])\r\n  \r\n    return canvasRef\r\n}\r\n\r\n// TODO: Look at referenced medium article\r\n// Add Resizing function\r\n// Add handling high pixel density screens (like smartphones)\r\n// Look into predraw and postdraw functions (in case we want to do something like clearing the screen, saving it, etc)\r\n\r\nexport default Canvas\r\n\r\n// for reference\r\n// https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258","import React from 'react'\r\nimport Canvas from './Canvas'\r\nimport Two from 'two.js';\r\n\r\nfunction App() {\r\n\r\n    const minGridStep = 15;\r\n    const [grid, setGrid] = React.useState(25);\r\n    const w = 600;\r\n    const h = 600;\r\n\r\n    function changeGrid(event) {\r\n        const { name, value } = event.target;\r\n\r\n        setGrid(prev => {\r\n            if(name === 'up') {\r\n                return Math.max(prev - 5, minGridStep);\r\n            }\r\n            else if (name === 'down') {\r\n                return Math.min(prev + 5, Math.min(w, h));\r\n            }\r\n        });\r\n    }\r\n\r\n    // Define a draw function\r\n    // https://two.js.org/#basic-usage\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const draw = (ctx, frameCount) => {\r\n        var two = new Two({\r\n            type: Two.Types.canvas,\r\n            width: w,\r\n            height: h,\r\n            domElement: ctx.canvas\r\n        });\r\n\r\n        for(var i = 0; i < w; i+=grid) {\r\n            var line = two.makeLine(i, 0, i, h);\r\n        }\r\n\r\n        for(var i = 0; i < h; i+=grid) {\r\n            var line = two.makeLine(0, i, w, i);\r\n        }\r\n          \r\n        two.update();\r\n    }\r\n\r\n  return <div>\r\n    <h1>Hello world!</h1>\r\n    <Canvas \r\n        draw={draw} \r\n        options={{\r\n            context: '2d'\r\n            }}\r\n        style={{\r\n            borderStyle: 'solid'\r\n        }}\r\n        width={w}\r\n        height={h}\r\n        />\r\n    <button type='button' name='down' onClick={changeGrid}>-</button>\r\n    <button type='button' name='up' onClick={changeGrid}>+</button>\r\n  </div>;\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n);\n\n// https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\n"],"sourceRoot":""}